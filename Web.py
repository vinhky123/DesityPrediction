import streamlit as st
import joblib
import pandas as pd

model = joblib.load('model.pkl') 
scaler = joblib.load('scaler.pkl')


label_encoders = joblib.load('label_encoders.pkl')  # Path to saved encoders


# Feature columns
X_columns = [
    'Gender', 'Age', 'Height', 'Weight', 'family_history_with_overweight',
    'FAVC', 'FCVC', 'NCP', 'CAEC', 'SMOKE', 'CH2O', 'SCC', 'FAF', 'TUE',
    'CALC', 'MTRANS'
]

# Categorical columns
categorical_columns = ['Gender', 'family_history_with_overweight', 'FAVC', 
                       'CAEC', 'SMOKE', 'SCC', 'CALC', 'MTRANS']

# Mapping dictionaries for translation
translation_mapping = {
    'Gender': {'Nam': 'Male', 'N·ªØ': 'Female'},
    'family_history_with_overweight': {'C√≥': 'yes', 'Kh√¥ng': 'no'},
    'FAVC': {'C√≥': 'yes', 'Kh√¥ng': 'no'},
    'CAEC': {'Kh√¥ng': 'no', 'Th·ªânh tho·∫£ng': 'Sometimes', 'Th∆∞·ªùng xuy√™n': 'Frequently', 'Lu√¥n lu√¥n': 'Always'},
    'SMOKE': {'C√≥': 'yes', 'Kh√¥ng': 'no'},
    'SCC': {'C√≥': 'yes', 'Kh√¥ng': 'no'},
    'CALC': {'Kh√¥ng': 'no', 'Th·ªânh tho·∫£ng': 'Sometimes', 'Th∆∞·ªùng xuy√™n': 'Frequently', 'Lu√¥n lu√¥n': 'Always'},
    'MTRANS': {'√î t√¥': 'Automobile', 'Xe m√°y': 'Motorbike', 'Xe ƒë·∫°p': 'Bike', 
               'Ph∆∞∆°ng ti·ªán c√¥ng c·ªông': 'Public_Transportation', 'ƒêi b·ªô': 'Walking'}
}

# Define the prediction function
def predict_obesity(input_list):
    if len(input_list) != len(X_columns):
        raise ValueError(f"Expected {len(X_columns)} features, but got {len(input_list)}")

    input_dict = {col: [val] for col, val in zip(X_columns, input_list)}
    input_df = pd.DataFrame(input_dict)

    for col in categorical_columns:
        if col in input_df.columns:
            input_df[col] = label_encoders[col].transform(input_df[col])

    input_normalized = scaler.transform(input_df)

    prediction_proba = model.predict_proba(input_normalized)
    obesity_indices = [2, 3, 4] 
    obesity_probability = sum(prediction_proba[0][index] for index in obesity_indices) * 100  

    return obesity_probability

st.title("·ª®ng d·ª•ng D·ª± ƒêo√°n B√©o Ph√¨ üåü")
st.write("D·ª± ƒëo√°n t·ª∑ l·ªá b√©o ph√¨ d·ª±a tr√™n c√°c th√¥ng s·ªë c√° nh√¢n v√† th√≥i quen h·∫±ng ng√†y.")

# Sidebar for input
st.sidebar.header("Th√¥ng tin c√° nh√¢n")
gender = st.sidebar.radio("Gi·ªõi t√≠nh", list(translation_mapping['Gender'].keys()))
age = st.sidebar.slider("Tu·ªïi", min_value=1, max_value=100, value=25)
height = st.sidebar.slider("Chi·ªÅu cao (m)", min_value=0.5, max_value=2.5, value=1.7, step=0.01)
weight = st.sidebar.slider("C√¢n n·∫∑ng (kg)", min_value=10, max_value=300, value=70)
family_history = st.sidebar.radio("Gia ƒë√¨nh c√≥ ng∆∞·ªùi b·ªã b√©o ph√¨", list(translation_mapping['family_history_with_overweight'].keys()))

# Main input
st.header("Th√≥i quen h·∫±ng ng√†y")
favc = st.selectbox("Th∆∞·ªùng xuy√™n s·ª≠ d·ª•ng th·ª±c ph·∫©m c√≥ Calo cao", list(translation_mapping['FAVC'].keys()))
fcvc = st.slider("T·∫ßn su·∫•t ƒÉn tr√°i c√¢y (1-3)", min_value=1, max_value=3, value=2)
ncp = st.slider("S·ªë b·ªØa ƒÉn m·ªói ng√†y (1-4)", min_value=1, max_value=4, value=3)
caec = st.selectbox("Ti√™u th·ª• th·ª±c ph·∫©m gi·ªØa c√°c b·ªØa ƒÉn", list(translation_mapping['CAEC'].keys()))
smoke = st.radio("H√∫t thu·ªëc", list(translation_mapping['SMOKE'].keys()))
ch2o = st.slider("L∆∞·ª£ng n∆∞·ªõc u·ªëng m·ªói ng√†y (1-3)", min_value=1, max_value=3, value=2)
scc = st.radio("Theo d√µi Calo", list(translation_mapping['SCC'].keys()))
faf = st.slider("T·∫ßn su·∫•t ch∆°i th·ªÉ thao (0-3)", min_value=0, max_value=3, value=1)
tue = st.slider("Th·ªùi gian s·ª≠ d·ª•ng thi·∫øt b·ªã c√¥ng ngh·ªá (0-2)", min_value=0, max_value=2, value=1)
calc = st.selectbox("U·ªëng r∆∞·ª£u bia", list(translation_mapping['CALC'].keys()))
mtrans = st.selectbox("Ph∆∞∆°ng ti·ªán di chuy·ªÉn", list(translation_mapping['MTRANS'].keys()))

input_features = [
    translation_mapping['Gender'][gender],
    age,
    height,
    weight,
    translation_mapping['family_history_with_overweight'][family_history],
    translation_mapping['FAVC'][favc],
    fcvc,
    ncp,
    translation_mapping['CAEC'][caec],
    translation_mapping['SMOKE'][smoke],
    ch2o,
    translation_mapping['SCC'][scc],
    faf,
    tue,
    translation_mapping['CALC'][calc],
    translation_mapping['MTRANS'][mtrans]
]

# Predict button
if st.button("D·ª± ƒëo√°n"):
    try:
        result = predict_obesity(input_features)
        st.success(f"üîç T·ªâ l·ªá b·ªã b√©o ph√¨: **{result:.2f}%**")
        
        # Visualize result
        st.progress(min(result / 100, 1.0))
        st.info("H√£y duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh ƒë·ªÉ c·∫£i thi·ªán s·ª©c kh·ªèe!")
    except ValueError as e:
        st.error(f"L·ªói: {e}")
